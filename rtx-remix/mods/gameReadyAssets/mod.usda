#usda 1.0
(
    subLayers = [
        @./autopbr.usda@
    ]
)

over "RootNode"
{
    over "Looks"
    {
        over "mat_9CB9DAC2FB424C27"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/9CB9DAC2FB424C27_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                color3f inputs:emissive_color_constant = (1, 0, 0) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = """The emissive color when no emissive color texture is specified.\r
\r
"""
                    hidden = false
                    renderType = "color"
                )
                float inputs:emissive_intensity = 200 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = """Intensity of the emission\r
\r
"""
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = """Enables the emission of light from the material\r
\r
"""
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.01 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_E8C4FC3F46885E17"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E8C4FC3F46885E17_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/E8C4FC3F46885E17_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_7B54C60511D42828"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7B54C60511D42828_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.01 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_E89560BBB285CA2D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E89560BBB285CA2D_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/E89560BBB285CA2D_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_3EEE36D238FAAC4F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/3EEE36D238FAAC4F_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/3EEE36D238FAAC4F_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_9A65C44A15C3118F"
        {
            over "Shader"
            {
                float inputs:anisotropy_constant = -0.14999999 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Amount"
                    doc = """0 for isotropic, extents of -1 to 1 for anisotropy\r
\r
"""
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = """The base albedo color to use if no texture is specified\r
\r
"""
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @./tex/9A65C44A15C3118F_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = """Adds a thin film coating to the material\r
\r
"""
                    hidden = false
                )
                float inputs:metallic_constant = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/9A65C44A15C3118F_normalX.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Opacity Amount"
                    doc = """Used when no albedo texture is specified. 0 for completely transparent, 1 for completly opaque.\r
\r
"""
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.17 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                color3f inputs:subsurface_transmittance_color = (0.5, 0.5, 0.5) (
                    customData = {
                        float3 default = (0.5, 0.5, 0.5)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Subsurface Transmittance Color"
                    doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                    hidden = false
                    renderType = "color"
                )
            }
        }

        over "mat_37336C064BB24ABF"
        {
            over "Shader"
            {
                color3f inputs:diffuse_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = """The base albedo color to use if no texture is specified\r
\r
"""
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @./tex/37336C064BB24ABF_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = """Adds a thin film coating to the material\r
\r
"""
                    hidden = false
                )
                float inputs:metallic_constant = 0.39999998 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/37336C064BB24ABF_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:opacity_constant = 0.5 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Opacity Amount"
                    doc = """Used when no albedo texture is specified. 0 for completely transparent, 1 for completly opaque.\r
\r
"""
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.2 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
                float inputs:thin_film_thickness_constant = 200 (
                    customData = {
                        float default = 200
                        dictionary range = {
                            float max = 1500
                            float min = 0.001
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film constant thickness in nm"
                    doc = """Thickness of the thin film if not specified in albedo texture\r
\r
"""
                    hidden = false
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = """Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case.\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_E69BBB7904B5EAD0"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E69BBB7904B5EAD0_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 0.3 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/E69BBB7904B5EAD0_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.2 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_6823110B9B592B94"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/6823110B9B592B94_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 0.9 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/6823110B9B592B94_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.14999999 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_749013B32DAC9D7E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/749013B32DAC9D7E_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 0.39999998 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/749013B32DAC9D7E_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.2 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_E66BA7D2B9A00790"
        {
            over "Shader"
            {
                float inputs:anisotropy_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Amount"
                    doc = """0 for isotropic, extents of -1 to 1 for anisotropy\r
\r
"""
                    hidden = false
                )
                bool inputs:blend_enabled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Enabled"
                    doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                    hidden = false
                )
                int inputs:blend_type = 3 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Type"
                    doc = """The alpha state blend type to use.\r
This parameter is unused.\r
"""
                    hidden = false
                    renderType = "BlendType"
                    sdrMetadata = {
                        string __SDR__enum_value = "Alpha"
                        string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                    }
                )
                color3f inputs:diffuse_color_constant = (1, 1, 0.94) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = """The base albedo color to use if no texture is specified\r
\r
"""
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @./tex/E66BA7D2B9A00790_diffuseX.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = """Adds a thin film coating to the material\r
\r
"""
                    hidden = false
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/E66BA7D2B9A00790_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:opacity_constant = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Opacity Amount"
                    doc = """Used when no albedo texture is specified. 0 for completely transparent, 1 for completly opaque.\r
\r
"""
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:thin_film_thickness_constant = 106.49993 (
                    customData = {
                        float default = 200
                        dictionary range = {
                            float max = 1500
                            float min = 0.001
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film constant thickness in nm"
                    doc = """Thickness of the thin film if not specified in albedo texture\r
\r
"""
                    hidden = false
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = """Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case.\r
\r
"""
                    hidden = false
                )
                bool inputs:use_legacy_alpha_state = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Material Flags"
                    displayName = "Use Legacy Alpha State"
                    doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_17627BC29D243B00"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/17627BC29D243B00_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/17627BC29D243B00_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.8 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_539DD2A751947637"
        {
            over "Shader"
            {
                float inputs:anisotropy_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Amount"
                    doc = """0 for isotropic, extents of -1 to 1 for anisotropy\r
\r
"""
                    hidden = false
                )
                asset inputs:diffuse_texture = @./tex/539DD2A751947637_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 0.98999995 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/539DD2A751947637_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.099999994 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_434FD0868F64447F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/434FD0868F64447F_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/434FD0868F64447F_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.19999999 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_D4409B5AB27DA66A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D4409B5AB27DA66A_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/D4409B5AB27DA66A_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.8 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_4B6A85EC4D7ADAF2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4B6A85EC4D7ADAF2_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 0.25 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = """Metallic Material\r
\r
"""
                    hidden = false
                )
                asset inputs:normalmap_texture = @./tex/4B6A85EC4D7ADAF2_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.4 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = """Higher roughness values lead to more blurry reflections\r
\r
"""
                    hidden = false
                )
            }
        }

        over "mat_0576B610B238E914"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/0576B610B238E914_diffuse.dds@
            }
        }

        over "mat_0856F8A807FB29FC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/0856F8A807FB29FC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/0856F8A807FB29FC_normal.dds@
            }
        }

        over "mat_0AE7916B8BDA2B27"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/0AE7916B8BDA2B27_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/0AE7916B8BDA2B27_normal.dds@
            }
        }

        over "mat_0C7AF015CB264EB8"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/0C7AF015CB264EB8_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/0C7AF015CB264EB8_normal.dds@
            }
        }

        over "mat_0D9C630BDB6AA6CE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/0D9C630BDB6AA6CE_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/0D9C630BDB6AA6CE_normal.dds@
            }
        }

        over "mat_0DBBC0F9C63E952B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/0DBBC0F9C63E952B_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/0DBBC0F9C63E952B_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0E810507696506F2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/0E810507696506F2_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/0E810507696506F2_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_105467FEFBE6B1F3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/105467FEFBE6B1F3_diffuse.dds@
            }
        }

        over "mat_115E956FEF8A6877"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/115E956FEF8A6877_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/115E956FEF8A6877_normal.dds@
            }
        }

        over "mat_11FC9D839E672D70"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/11FC9D839E672D70_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/11FC9D839E672D70_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_120F96D8D3E493F8"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/120F96D8D3E493F8_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/120F96D8D3E493F8_normal.dds@
            }
        }

        over "mat_12534227AC585E1F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/12534227AC585E1F_diffuse.dds@
            }
        }

        over "mat_15083586AF61C911"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/15083586AF61C911_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/15083586AF61C911_normal.dds@
            }
        }

        over "mat_19883FDB79FA5ADC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/19883FDB79FA5ADC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/19883FDB79FA5ADC_normal.dds@
            }
        }

        over "mat_1BDCE665226EC6E7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/1BDCE665226EC6E7_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/1BDCE665226EC6E7_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_234D596FA938C353"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/234D596FA938C353_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/234D596FA938C353_normal.dds@
            }
        }

        over "mat_242A5FDD2705C9AF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/242A5FDD2705C9AF_diffuse.dds@
            }
        }

        over "mat_26AE30D074D719FC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/26AE30D074D719FC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/26AE30D074D719FC_normal.dds@
            }
        }

        over "mat_28EE338AC0621FD9"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/28EE338AC0621FD9_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/28EE338AC0621FD9_normal.dds@
            }
        }

        over "mat_2BC47C01CE615896"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/2BC47C01CE615896_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/2BC47C01CE615896_normal.dds@
            }
        }

        over "mat_2C2558F24634B692"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/2C2558F24634B692_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/2C2558F24634B692_normal.dds@
            }
        }

        over "mat_2E81311FF03739E4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/2E81311FF03739E4_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/2E81311FF03739E4_normal.dds@
            }
        }

        over "mat_2EA2772C30CF786B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/2EA2772C30CF786B_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/2EA2772C30CF786B_normal.dds@
            }
        }

        over "mat_2EB8F1604F804B27"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/2EB8F1604F804B27_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_3242C04CD2023DFC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/3242C04CD2023DFC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/3242C04CD2023DFC_normal.dds@
            }
        }

        over "mat_3285732E5CBE0039"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/3285732E5CBE0039_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/3285732E5CBE0039_normal.dds@
            }
        }

        over "mat_34826FBCD087DC1D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/34826FBCD087DC1D_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/34826FBCD087DC1D_normal.dds@
            }
        }

        over "mat_35D5255F78E7917D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/35D5255F78E7917D_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/35D5255F78E7917D_normal.dds@
            }
        }

        over "mat_3944A7F6F77B713F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/3944A7F6F77B713F_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/3944A7F6F77B713F_normal.dds@
            }
        }

        over "mat_3B64A5070379EF97"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/3B64A5070379EF97_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/3B64A5070379EF97_normal.dds@
            }
        }

        over "mat_3E7FEBA6F17A2622"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/3E7FEBA6F17A2622_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/3E7FEBA6F17A2622_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_3E82917CDC8A275E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/3E82917CDC8A275E_diffuse.dds@
            }
        }

        over "mat_4223938867C9DF09"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4223938867C9DF09_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4223938867C9DF09_normal.dds@
            }
        }

        over "mat_430A427D73741BAC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/430A427D73741BAC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/430A427D73741BAC_normal.dds@
            }
        }

        over "mat_43FC8EE1FA7D9717"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/43FC8EE1FA7D9717_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/43FC8EE1FA7D9717_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_4412FAE2A5C2719C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4412FAE2A5C2719C_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4412FAE2A5C2719C_normal.dds@
            }
        }

        over "mat_444F2F8F2BF48935"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/444F2F8F2BF48935_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/444F2F8F2BF48935_normal.dds@
            }
        }

        over "mat_44F509F3BDA9C6B7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/44F509F3BDA9C6B7_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/44F509F3BDA9C6B7_normal.dds@
            }
        }

        over "mat_4765B3E7A02492E2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4765B3E7A02492E2_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_48DE20B5DCC00D9B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/48DE20B5DCC00D9B_diffuse.dds@
            }
        }

        over "mat_493EA5ECE0FEE6B3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/493EA5ECE0FEE6B3_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/493EA5ECE0FEE6B3_normal.dds@
            }
        }

        over "mat_4A95308B4B4FCF1E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4A95308B4B4FCF1E_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/4A95308B4B4FCF1E_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_4B90529BC2742D61"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4B90529BC2742D61_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4B90529BC2742D61_normal.dds@
            }
        }

        over "mat_4BC9F8FDA871815E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4BC9F8FDA871815E_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/4BC9F8FDA871815E_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_4D3C97A4B215F227"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4D3C97A4B215F227_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4D3C97A4B215F227_normal.dds@
            }
        }

        over "mat_4D61F88F9E18D5BE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4D61F88F9E18D5BE_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4D61F88F9E18D5BE_normal.dds@
            }
        }

        over "mat_4DDA5F5D5B861719"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4DDA5F5D5B861719_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4DDA5F5D5B861719_normal.dds@
            }
        }

        over "mat_4EBA7DC3889A1426"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4EBA7DC3889A1426_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4EBA7DC3889A1426_normal.dds@
            }
        }

        over "mat_4ED468AA5C69BEE4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4ED468AA5C69BEE4_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4ED468AA5C69BEE4_normal.dds@
            }
        }

        over "mat_4F2D457095256C91"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/4F2D457095256C91_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/4F2D457095256C91_normal.dds@
            }
        }

        over "mat_50651E96D9C990FC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/50651E96D9C990FC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/50651E96D9C990FC_normal.dds@
            }
        }

        over "mat_520CF3BC52E026BE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/520CF3BC52E026BE_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/520CF3BC52E026BE_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_5781B1D1E299C897"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/5781B1D1E299C897_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/5781B1D1E299C897_normal.dds@
            }
        }

        over "mat_58300F267D2A70DC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/58300F267D2A70DC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/58300F267D2A70DC_normal.dds@
            }
        }

        over "mat_58ACBA21B6B3235F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/58ACBA21B6B3235F_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/58ACBA21B6B3235F_normal.dds@
            }
        }

        over "mat_5C1B4AEB430BCC33"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/5C1B4AEB430BCC33_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/5C1B4AEB430BCC33_normal.dds@
            }
        }

        over "mat_5C2E265043D86D0B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/5C2E265043D86D0B_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/5C2E265043D86D0B_normal.dds@
            }
        }

        over "mat_5D48842A9D3F8134"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/5D48842A9D3F8134_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/5D48842A9D3F8134_normal.dds@
            }
        }

        over "mat_5D896E708A29BE73"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/5D896E708A29BE73_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/5D896E708A29BE73_normal.dds@
            }
        }

        over "mat_5E38330F75628A1E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/5E38330F75628A1E_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/5E38330F75628A1E_normal.dds@
            }
        }

        over "mat_5FAD82223A07A69E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/5FAD82223A07A69E_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/5FAD82223A07A69E_normal.dds@
            }
        }

        over "mat_600797505E59037B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/600797505E59037B_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/600797505E59037B_normal.dds@
            }
        }

        over "mat_6328B86FB108FBFA"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/6328B86FB108FBFA_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/6328B86FB108FBFA_normal.dds@
            }
        }

        over "mat_65A7673C8088AEC8"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/65A7673C8088AEC8_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/65A7673C8088AEC8_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_66759B6754147993"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/66759B6754147993_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/66759B6754147993_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_66E27CE21FD2026E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/66E27CE21FD2026E_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/66E27CE21FD2026E_normal.dds@
            }
        }

        over "mat_69B3B0020CA799A7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/69B3B0020CA799A7_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/69B3B0020CA799A7_normal.dds@
            }
        }

        over "mat_6A72FD6E15BFB562"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/6A72FD6E15BFB562_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/6A72FD6E15BFB562_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_6B4526864103719F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/6B4526864103719F_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/6B4526864103719F_normal.dds@
            }
        }

        over "mat_6B527C37EBEC4FE4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/6B527C37EBEC4FE4_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/6B527C37EBEC4FE4_normal.dds@
            }
        }

        over "mat_6CFA755C2499CC67"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/6CFA755C2499CC67_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/6CFA755C2499CC67_normal.dds@
            }
        }

        over "mat_6FACCD2719F5B81A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/6FACCD2719F5B81A_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/6FACCD2719F5B81A_normal.dds@
            }
        }

        over "mat_7000A0A5186491EC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7000A0A5186491EC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7000A0A5186491EC_normal.dds@
            }
        }

        over "mat_710CF14EC24AA0D2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/710CF14EC24AA0D2_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/710CF14EC24AA0D2_normal.dds@
            }
        }

        over "mat_71E510A5EFEB01B8"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/71E510A5EFEB01B8_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/71E510A5EFEB01B8_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_730B0C185019D77D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/730B0C185019D77D_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/730B0C185019D77D_normal.dds@
            }
        }

        over "mat_748A5D5AF2187C21"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/748A5D5AF2187C21_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/748A5D5AF2187C21_normal.dds@
            }
        }

        over "mat_74ECF6014F305CD7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/74ECF6014F305CD7_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_76F4E10176F30F0F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/76F4E10176F30F0F_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/76F4E10176F30F0F_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_7701D0A8A2AC63F6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7701D0A8A2AC63F6_diffuse.dds@
            }
        }

        over "mat_7766EE4BA317560D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7766EE4BA317560D_diffuse.dds@
            }
        }

        over "mat_7859067B27579649"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7859067B27579649_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7859067B27579649_normal.dds@
            }
        }

        over "mat_7A413524A39F0FB5"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7A413524A39F0FB5_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7A413524A39F0FB5_normal.dds@
            }
        }

        over "mat_7AD59E3DBE303835"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7AD59E3DBE303835_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7AD59E3DBE303835_normal.dds@
            }
        }

        over "mat_7AECC2A5B95F4948"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7AECC2A5B95F4948_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7AECC2A5B95F4948_normal.dds@
            }
        }

        over "mat_7B2669557570E9B4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7B2669557570E9B4_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7B2669557570E9B4_normal.dds@
            }
        }

        over "mat_7B94F8DF95355735"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7B94F8DF95355735_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7B94F8DF95355735_normal.dds@
            }
        }

        over "mat_7C90E55C4F64F473"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7C90E55C4F64F473_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7C90E55C4F64F473_normal.dds@
            }
        }

        over "mat_7E1AF8072950CEAC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7E1AF8072950CEAC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7E1AF8072950CEAC_normal.dds@
            }
        }

        over "mat_7EC26CB06E157BA3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7EC26CB06E157BA3_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_7EDD2EB8C8EB4F82"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/7EDD2EB8C8EB4F82_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/7EDD2EB8C8EB4F82_normal.dds@
            }
        }

        over "mat_81DB2548B9B0C137"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/81DB2548B9B0C137_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/81DB2548B9B0C137_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_81F679C90CEE21D2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/81F679C90CEE21D2_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/81F679C90CEE21D2_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8249A1BBF6CE84AF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8249A1BBF6CE84AF_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/8249A1BBF6CE84AF_normal.dds@
            }
        }

        over "mat_8338D76258DF0D30"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8338D76258DF0D30_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/8338D76258DF0D30_normal.dds@
            }
        }

        over "mat_83531F5D2013B837"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/83531F5D2013B837_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/83531F5D2013B837_normal.dds@
            }
        }

        over "mat_84E59BB2E19DAABF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/84E59BB2E19DAABF_diffuse.dds@
            }
        }

        over "mat_862A67791B678635"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/862A67791B678635_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/862A67791B678635_normal.dds@
            }
        }

        over "mat_868CB6D1B6477F09"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/868CB6D1B6477F09_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/868CB6D1B6477F09_normal.dds@
            }
        }

        over "mat_878BD48F77875ECC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/878BD48F77875ECC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/878BD48F77875ECC_normal.dds@
            }
        }

        over "mat_89737740025D7976"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/89737740025D7976_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/89737740025D7976_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_899B728D0887269D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/899B728D0887269D_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8A42E501C24802E5"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8A42E501C24802E5_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/8A42E501C24802E5_normal.dds@
            }
        }

        over "mat_8A79C3708E8A112F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8A79C3708E8A112F_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/8A79C3708E8A112F_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8B3758B9ADA10FFD"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8B3758B9ADA10FFD_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/8B3758B9ADA10FFD_normal.dds@
            }
        }

        over "mat_8C9C53224F8296FA"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8C9C53224F8296FA_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/8C9C53224F8296FA_normal.dds@
            }
        }

        over "mat_8CB3E133A32FAECA"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8CB3E133A32FAECA_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/8CB3E133A32FAECA_normal.dds@
            }
        }

        over "mat_8D283E72C7FB3E13"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8D283E72C7FB3E13_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8FB816578CCB53E6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/8FB816578CCB53E6_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/8FB816578CCB53E6_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_913017222F883BAE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/913017222F883BAE_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/913017222F883BAE_normal.dds@
            }
        }

        over "mat_914039A728ADFA07"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/914039A728ADFA07_diffuse.dds@
            }
        }

        over "mat_91A9AFD3AD9EB82E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/91A9AFD3AD9EB82E_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/91A9AFD3AD9EB82E_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_928739051C4AAA33"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/928739051C4AAA33_diffuse.dds@
            }
        }

        over "mat_935FEC3ECDD02FB6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/935FEC3ECDD02FB6_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/935FEC3ECDD02FB6_normal.dds@
            }
        }

        over "mat_94B7383763CDD057"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/94B7383763CDD057_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/94B7383763CDD057_normal.dds@
            }
        }

        over "mat_96B132EFA5F335E1"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/96B132EFA5F335E1_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/96B132EFA5F335E1_normal.dds@
            }
        }

        over "mat_9A1EDA378CAA8CD8"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/9A1EDA378CAA8CD8_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/9A1EDA378CAA8CD8_normal.dds@
            }
        }

        over "mat_9C048877196A440D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/9C048877196A440D_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/9C048877196A440D_normal.dds@
            }
        }

        over "mat_9C7F1822B902D526"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/9C7F1822B902D526_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/9C7F1822B902D526_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_9CCA99753942E0B2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/9CCA99753942E0B2_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/9CCA99753942E0B2_normal.dds@
            }
        }

        over "mat_9FBACE43738680FA"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/9FBACE43738680FA_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/9FBACE43738680FA_normal.dds@
            }
        }

        over "mat_A165379074723C5A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/A165379074723C5A_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/A165379074723C5A_normal.dds@
            }
        }

        over "mat_A3CC893C3D97D9FE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/A3CC893C3D97D9FE_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/A3CC893C3D97D9FE_normal.dds@
            }
        }

        over "mat_A6805E4D52BFA25E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/A6805E4D52BFA25E_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/A6805E4D52BFA25E_normal.dds@
            }
        }

        over "mat_A6F9F2A34772161C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/A6F9F2A34772161C_diffuse.dds@
            }
        }

        over "mat_A73B33A9AF627D76"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/A73B33A9AF627D76_diffuse.dds@
            }
        }

        over "mat_A74E425CBC5D84E9"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/A74E425CBC5D84E9_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/A74E425CBC5D84E9_normal.dds@
            }
        }

        over "mat_A957D222232CEC39"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/A957D222232CEC39_diffuse.dds@
            }
        }

        over "mat_AA535A3C0A833C10"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/AA535A3C0A833C10_diffuse.dds@
            }
        }

        over "mat_ADB46DC48601D156"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/ADB46DC48601D156_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/ADB46DC48601D156_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_AE79C9906AFB7CD5"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/AE79C9906AFB7CD5_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/AE79C9906AFB7CD5_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_AE8252FF05B482B3"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/AE8252FF05B482B3_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/AE8252FF05B482B3_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_AEB6E50E4BDD3056"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/AEB6E50E4BDD3056_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/AEB6E50E4BDD3056_normal.dds@
            }
        }

        over "mat_AF12E14913328F91"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/AF12E14913328F91_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/AF12E14913328F91_normal.dds@
            }
        }

        over "mat_AFD05C29CBB2601E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/AFD05C29CBB2601E_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/AFD05C29CBB2601E_normal.dds@
            }
        }

        over "mat_AFDEBE08A5F43577"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/AFDEBE08A5F43577_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/AFDEBE08A5F43577_normal.dds@
            }
        }

        over "mat_B028E2CB4675E812"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B028E2CB4675E812_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/B028E2CB4675E812_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B20BAAF0EFF0EB2C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B20BAAF0EFF0EB2C_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/B20BAAF0EFF0EB2C_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B38478A615ED2D90"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B38478A615ED2D90_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/B38478A615ED2D90_normal.dds@
            }
        }

        over "mat_B475C5F1C4B5A378"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B475C5F1C4B5A378_diffuse.dds@
            }
        }

        over "mat_B4DC264672AFB4B2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B4DC264672AFB4B2_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/B4DC264672AFB4B2_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B5C43F6CF0544A70"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B5C43F6CF0544A70_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/B5C43F6CF0544A70_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B64217ED77B27DFE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B64217ED77B27DFE_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/B64217ED77B27DFE_normal.dds@
            }
        }

        over "mat_B69859BCC9774990"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B69859BCC9774990_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/B69859BCC9774990_normal.dds@
            }
        }

        over "mat_B6CC051F76BEFFAE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B6CC051F76BEFFAE_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/B6CC051F76BEFFAE_normal.dds@
            }
        }

        over "mat_B8483E2F4C36C410"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B8483E2F4C36C410_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/B8483E2F4C36C410_normal.dds@
            }
        }

        over "mat_B87AA7C85708CB1C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/B87AA7C85708CB1C_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/B87AA7C85708CB1C_normal.dds@
            }
        }

        over "mat_BA5E47E83A07C032"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/BA5E47E83A07C032_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/BA5E47E83A07C032_normal.dds@
            }
        }

        over "mat_BC0B5479B2086E6A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/BC0B5479B2086E6A.dds@
            }
        }

        over "mat_BC88DF669EE7ACCB"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/BC88DF669EE7ACCB_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/BC88DF669EE7ACCB_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_BDFE66130E2AB713"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/BDFE66130E2AB713_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/BDFE66130E2AB713_normal.dds@
            }
        }

        over "mat_C44F83F574F1E478"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/C44F83F574F1E478_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/C44F83F574F1E478_normal.dds@
            }
        }

        over "mat_C5227C8AB5F43F9F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/C5227C8AB5F43F9F_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/C5227C8AB5F43F9F_normal.dds@
            }
        }

        over "mat_C567BB44C3F88494"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/C567BB44C3F88494_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/C567BB44C3F88494_normal.dds@
            }
        }

        over "mat_C939B21D9EF34E35"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/C939B21D9EF34E35_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/C939B21D9EF34E35_normal.dds@
            }
        }

        over "mat_CA9CAC4BB8A0E9B8"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/CA9CAC4BB8A0E9B8_diffuse.dds@
            }
        }

        over "mat_CB91AD20FE157AD0"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/CB91AD20FE157AD0_diffuse.dds@
            }
        }

        over "mat_CC6EC517AC553AA7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/CC6EC517AC553AA7_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/CC6EC517AC553AA7_normal.dds@
            }
        }

        over "mat_CC8DFB526F9D709E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/CC8DFB526F9D709E_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_CFBA7A3707C98A9E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/CFBA7A3707C98A9E_diffuse.dds@
            }
        }

        over "mat_D00EA5821957CC53"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D00EA5821957CC53_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/D00EA5821957CC53_normal.dds@
            }
        }

        over "mat_D0B90AAF7F1B8450"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D0B90AAF7F1B8450_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/D0B90AAF7F1B8450_normal.dds@
            }
        }

        over "mat_D0CD118F5F5264EC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D0CD118F5F5264EC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/D0CD118F5F5264EC_normal.dds@
            }
        }

        over "mat_D255166EA174D28E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D255166EA174D28E_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/D255166EA174D28E_normal.dds@
            }
        }

        over "mat_D46E4A7A0F28834B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D46E4A7A0F28834B_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/D46E4A7A0F28834B_normal.dds@
            }
        }

        over "mat_D5A9E1CF87EBC345"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D5A9E1CF87EBC345_diffuse.dds@
            }
        }

        over "mat_D5EC5F9E78F87FB9"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D5EC5F9E78F87FB9_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/D5EC5F9E78F87FB9_normal.dds@
            }
        }

        over "mat_D68EAC1233EBA0D1"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D68EAC1233EBA0D1_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/D68EAC1233EBA0D1_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_D8BF1FC7F8198772"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/D8BF1FC7F8198772_diffuse.dds@
            }
        }

        over "mat_DB713260F7D2862C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/DB713260F7D2862C_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/DB713260F7D2862C_normal.dds@
            }
        }

        over "mat_DC56D470574524CC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/DC56D470574524CC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/DC56D470574524CC_normal.dds@
            }
        }

        over "mat_DE5F15AB6DAF7941"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/DE5F15AB6DAF7941_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/DE5F15AB6DAF7941_normal.dds@
            }
        }

        over "mat_DEFA52E0B722AA55"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/DEFA52E0B722AA55_diffuse.dds@
            }
        }

        over "mat_E2EDB75573F4FED5"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E2EDB75573F4FED5_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_E3C920178F3A1CD8"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E3C920178F3A1CD8_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/E3C920178F3A1CD8_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_E4018050960E17FD"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E4018050960E17FD_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/E4018050960E17FD_normal.dds@
            }
        }

        over "mat_E64363849973DBC7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E64363849973DBC7_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/E64363849973DBC7_normal.dds@
            }
        }

        over "mat_E6486D0B7CF7254C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E6486D0B7CF7254C_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/E6486D0B7CF7254C_normal.dds@
            }
        }

        over "mat_E7D3074C23F0D09E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E7D3074C23F0D09E_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/E7D3074C23F0D09E_normal.dds@
            }
        }

        over "mat_E91BD94FC4C7620D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/E91BD94FC4C7620D_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/E91BD94FC4C7620D_normal.dds@
            }
        }

        over "mat_EB74966E0EF0B481"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/EB74966E0EF0B481_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/EB74966E0EF0B481_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_EBDA00F1870D1F79"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/EBDA00F1870D1F79_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/EBDA00F1870D1F79_normal.dds@
            }
        }

        over "mat_ECE164731CDA25F7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/ECE164731CDA25F7_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/ECE164731CDA25F7_normal.dds@
            }
        }

        over "mat_EE2B112571BEE262"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/EE2B112571BEE262_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/EE2B112571BEE262_normal.dds@
            }
        }

        over "mat_EF9D0588CFA3879B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/EF9D0588CFA3879B_diffuse.dds@
            }
        }

        over "mat_F2B504905CEC25C0"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/F2B504905CEC25C0_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/F2B504905CEC25C0_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F472362C297D7CF6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/F472362C297D7CF6_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F5C92D98F6AD92CF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/F5C92D98F6AD92CF_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/F5C92D98F6AD92CF_normal.dds@
            }
        }

        over "mat_F790787FAAC8CFDF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/F790787FAAC8CFDF_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/F790787FAAC8CFDF_normal.dds@
            }
        }

        over "mat_F863735582A78C57"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/F863735582A78C57_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/F863735582A78C57_normal.dds@
            }
        }

        over "mat_F8C92E77C2CE3EDC"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/F8C92E77C2CE3EDC_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/F8C92E77C2CE3EDC_normal.dds@
            }
        }

        over "mat_FCCE4B86737AA556"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/FCCE4B86737AA556_diffuse.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./tex/FCCE4B86737AA556_normal.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_FCE3ECA902BC91BB"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/FCE3ECA902BC91BB_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/FCE3ECA902BC91BB_normal.dds@
            }
        }

        over "mat_FD9BFBD62EB91515"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/FD9BFBD62EB91515_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/FD9BFBD62EB91515_normal.dds@
            }
        }

        over "mat_FE95701757AD3F29"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./tex/FE95701757AD3F29_diffuse.dds@
                asset inputs:normalmap_texture = @./tex/FE95701757AD3F29_normal.dds@
            }
        }
    }

    over "meshes"
    {
        over "mesh_1F60A727B041127D" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_1F60A727B041127D.usd@
        )
        {
            token visibility = "invisible"

            def Xform "Main_entrace" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.6621733989197196e-9, 0.006150491461896834, -0.6264655503296188)
                float3 xformOp:translate:pivot = (-0.99876124, 2.44716, 0.2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    bool visibleInPrimaryRay = 0
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.010915768786858845, -0.002319257874370958, -0.008215821909427547)
                    double3 xformOp:translate = (-8.902604235760563, 2.411441433888394, -2.3611451632756624)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    bool visibleInPrimaryRay = 0
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.010915768786858845, -0.002319257874370958, -0.008215821909427547)
                    double3 xformOp:translate = (-8.902604235760538, 2.4114414338883714, -1.152950449858524)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    bool visibleInPrimaryRay = 0
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.010915768786858845, -0.002319257874370958, -0.008215821909427547)
                    double3 xformOp:translate = (-1.1408411740847817, 2.411441433888369, -1.1582656698450096)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    bool visibleInPrimaryRay = 0
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.010915768786858845, -0.002319257874370958, -0.008215821909427547)
                    double3 xformOp:translate = (6.9050817349387135, 2.411437560983847, -2.361092565158647)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_04" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    bool visibleInPrimaryRay = 0
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.010915768786858845, -0.002319257874370958, -0.008215821909427547)
                    double3 xformOp:translate = (6.9050817349387135, 2.411441433888361, -0.9596140041479213)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Platform" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (16.70757, 2.11979, 3.2992258)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight_05" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (7.178723098249382, 2.119789999999901, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_06" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (6.202225098635548, 2.119789999999832, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_07" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (5.222162413543952, 2.1197899999998366, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_08" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (8.194441348501528, 2.119789999999843, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_09" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (9.204634856857645, 2.119789999999773, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_10" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (10.196956257147626, 2.119789999999906, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_11" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (11.169370666624872, 2.119789999999769, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_12" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (15.18642218084143, 2.119789999999836, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_13" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (18.202138152257906, 2.119789999999901, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_14" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (19.169212946562215, 2.1197899999998358, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_15" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (20.19279643102099, 2.1197899999999, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_16" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (23.211251969569776, 2.119789999999837, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_17" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (25.18299862891134, 2.1197899999999024, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_18" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (26.20334781376297, 2.119789999999837, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_19" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (27.168365630661587, 2.1197899999998384, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_20" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (28.192974154132923, 2.1197899999997745, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_21" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (2.150922716664038, 2.1197899999998877, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_22" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (0.15693931020645735, 2.119789999999899, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_23" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-0.7968275429738512, 2.119789999999897, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_24" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-1.8352963512866154, 2.1197899999998335, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_25" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-3.8256179201294103, 2.1197899999998984, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_26" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-4.79474799224449, 2.119789999999824, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_27" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-5.799138274929007, 2.119789999999836, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_28" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-6.795842839464479, 2.1197899999997674, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_29" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-7.806008648252332, 2.1197899999998984, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_30" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-10.7886859522456, 2.1197899999998957, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_31" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-11.810391081314801, 2.119789999999828, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_32" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-12.837327205248478, 2.1197899999998318, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_33" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-16.81077794969225, 2.119789999999893, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_34" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-18.799939743793892, 2.1197899999999033, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_35" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (-90, 1.4124500318633039e-30, 7.0167091267055864e-15)
                    double3 xformOp:scale = (-0.008990000002086163, -0.0019600000232458115, 0.0043814755194707174)
                    double3 xformOp:translate = (-19.78125769754686, 2.11978999999983, 3.2494363412918412)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Sign" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (0.83559096, 1.7009132, 9.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 9000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 15000
                    bool inputs:normalize = 0
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness = 0
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool inputs:shaping:ies:normalize = 0
                    float inputs:width = 100
                    bool isProjector = 0
                    double3 xformOp:rotateXYZ = (222.79906550372743, 0, 0)
                    double3 xformOp:scale = (0.00883, 0.00158, 0.00282)
                    double3 xformOp:translate = (1.860132835349969, 1.5439547536599436, 9.092051974687285)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 9000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 15000
                    bool inputs:normalize = 0
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness = 0
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool inputs:shaping:ies:normalize = 0
                    float inputs:width = 100
                    bool isProjector = 0
                    double3 xformOp:rotateXYZ = (222.79906550372743, 0, 0)
                    double3 xformOp:scale = (0.00883, 0.00158, 0.00282)
                    double3 xformOp:translate = (0.8086345192033954, 1.543954753659929, 9.092051974687303)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 9000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 15000
                    bool inputs:normalize = 0
                    float inputs:shaping:cone:angle = 90
                    float inputs:shaping:cone:softness = 0
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    bool inputs:shaping:ies:normalize = 0
                    float inputs:width = 100
                    bool isProjector = 0
                    double3 xformOp:rotateXYZ = (222.79906550372743, 0, 0)
                    double3 xformOp:scale = (0.00883, 0.00158, 0.00282)
                    double3 xformOp:translate = (-0.1889509761441761, 1.543954753659929, 9.092051974687303)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_6C82AECB33E1F285" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_6C82AECB33E1F285.usd@
        )
        {
            token visibility = "invisible"

            def Xform "To_the_surface" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (1.6170915, 1.7426347, 0.19385)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def Xform "Group1" (
                    kind = "group"
                )
                {
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    float3 xformOp:translate:pivot = (5.373057, 0.535819, 0.19385)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                    def RectLight "RectLight_02" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                        float inputs:colorTemperature = 5000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 0
                        float inputs:height = 100
                        float inputs:intensity = 11000
                        bool inputs:normalize = 1
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus = 0
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 100
                        double3 xformOp:rotateXYZ = (-90, 0, -27)
                        double3 xformOp:scale = (0.00873, 0.00195, -0.01197)
                        double3 xformOp:translate = (5.418912270051318, 0.5066637244414887, 0.19384999398315705)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    def RectLight "RectLight_03" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                        float inputs:colorTemperature = 5000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 0
                        float inputs:height = 100
                        float inputs:intensity = 11000
                        bool inputs:normalize = 1
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus = 0
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 100
                        double3 xformOp:rotateXYZ = (-90, 0, -27)
                        double3 xformOp:scale = (0.00873, 0.00195, -0.01197)
                        double3 xformOp:translate = (4.511946139651163, 0.9687860497098855, 0.19384999398308003)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    def RectLight "RectLight_04" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                        float inputs:colorTemperature = 5000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 0
                        float inputs:height = 100
                        float inputs:intensity = 11000
                        bool inputs:normalize = 1
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus = 0
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 100
                        double3 xformOp:rotateXYZ = (-90, 0, -27)
                        double3 xformOp:scale = (0.00873, 0.00195, -0.01197)
                        double3 xformOp:translate = (2.748991618053052, 1.8425995082891269, 0.193849993982983)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }
                }

                def Xform "Group2" (
                    kind = "group"
                )
                {
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    float3 xformOp:translate:pivot = (-1.6736339, 2.7123985, 0.19385)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                        float inputs:colorTemperature = 5000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 0
                        float inputs:height = 100
                        float inputs:intensity = 11000
                        bool inputs:normalize = 1
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus = 0
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 100
                        double3 xformOp:rotateXYZ = (-90, 0, -27)
                        double3 xformOp:scale = (0.00873, 0.00195, -0.01197)
                        double3 xformOp:translate = (-1.208393889312522, 2.47534702521503, 0.19384999398327596)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    def RectLight "RectLight_01" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                        float inputs:colorTemperature = 5000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 0
                        float inputs:height = 100
                        float inputs:intensity = 11000
                        bool inputs:normalize = 1
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus = 0
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 100
                        double3 xformOp:rotateXYZ = (-90, 0, -27)
                        double3 xformOp:scale = (0.00873, 0.00195, -0.01197)
                        double3 xformOp:translate = (-2.138873889414338, 2.9494502655119925, 0.19384999398315045)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }
                }

                def Xform "Group3" (
                    kind = "group"
                )
                {
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    float3 xformOp:translate:pivot = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                        float inputs:colorTemperature = 5000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 0
                        float inputs:height = 100
                        float inputs:intensity = 11000
                        bool inputs:normalize = 1
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus = 0
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 100
                        double3 xformOp:rotateXYZ = (220, 0, 0)
                        double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                        double3 xformOp:translate = (-6.900000102818011, 3.5920536862803236, -1.69276128402965)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    def RectLight "RectLight_01" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                        float inputs:colorTemperature = 5000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 0
                        float inputs:height = 100
                        float inputs:intensity = 11000
                        bool inputs:normalize = 1
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus = 0
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 100
                        double3 xformOp:rotateXYZ = (220, 0, 0)
                        double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                        double3 xformOp:translate = (-9.931300467187995, 3.592053686280325, -1.6927612840296486)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }
                }
            }
        }

        over "mesh_57A56E584B054BA6" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_57A56E584B054BA6.usd@
        )
        {
            token visibility = "invisible"

            def Xform "Left_Room_small" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (0.29602015, 1.2951918, 1.6)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (0.2960201608941898, 1.295191764043808, 3.6000000536441803)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (0.2960201608941898, 1.2951917640438058, -0.3967096196313926)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_0D0544BF75B9539C" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_0D0544BF75B9539C.usd@
        )
        {
            token visibility = "invisible"

            def Xform "Left_room_big" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (0.95358187, 1.4799851, -0.09678044)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (0.8000000119209286, 1.47998509568006, -2.4099999999991963)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (-2.690434691940372, 1.47998509568006, -2.4099999999984876)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (-2.1000000312924385, 1.4799850956800578, 3.6000000536441803)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (0.43, 1.4799850956800578, 3.6000000536441803)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_04" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (4.597598413593973, 1.479985095680058, -0.5952073162558804)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_05" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (4.597598413593906, 1.4799850956800582, -3.793560935178938)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_06" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.0021433013097966955, 0.001873303876671677, 0.023879381538590726)
                    double3 xformOp:translate = (-5.700000084936619, 1.3000000193715096, 3.300000049173832)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_F60A65883DE87454" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_F60A65883DE87454.usd@
        )
        {
            token visibility = "invisible"

            def Xform "Shower" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (-0.18, 2.543311, 0.08)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def DiskLight "DiskLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5300
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 10000
                    bool inputs:normalize = 1
                    float inputs:radius = 50
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.00448, 0.00448, 0.016397300872069427)
                    double3 xformOp:translate = (-1.1899999999999995, 2.543311211274563, 0.08000000000000002)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def DiskLight "DiskLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5300
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 10000
                    bool inputs:normalize = 1
                    float inputs:radius = 50
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 0)
                    double3 xformOp:scale = (0.00448, 0.00448, 0.016397300872069427)
                    double3 xformOp:translate = (0.8299999999999997, 2.543311211274563, 0.08000000000000002)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_CAD3F2C8AE50712E" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_CAD3F2C8AE50712E.usd@
        )
        {
            token visibility = "invisible"

            def Xform "Surface_left" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (-2.0826533, 0.8709781, -3.29)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842840647, 0.8709781391428784, -3.3301621736035156)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842840735, 0.8709781391428782, -4.312882876114807)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_04" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.082653384284432, 0.8709781391435336, 4.700000070035458)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_05" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842847224, 0.8709781391437348, 8.700000129640102)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_06" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842840647, 0.8709781391428784, -8.300000123679638)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_07" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842840647, 0.8709781391428784, -9.300000138580799)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_08" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842840647, 0.8709781391428784, -10.30000015348196)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_09" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842840647, 0.8709781391428784, -11.300000168383121)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_10" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (45, 90, 2.2737367544323206e-13)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.0826533842840647, 0.8709781391428784, -15.28)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Surface_right" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (2.5517893, 0.9034415, -5.3)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight_11" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -16.300000242888927)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_12" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -17.30000025779009)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_13" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -18.30000027269125)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_14" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -13.300000198185444)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_15" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -12.300000183284283)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_16" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -9.300000138580799)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_17" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -8.300000123679638)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_18" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -6.3000000938773155)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_19" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -5.300000078976154)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_20" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -2.3000000342726707)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_21" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -1.3000000193715096)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_22" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, -0.30000000447034836)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_23" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, 2.7000000402331352)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_24" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, -90, 30)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (2.5517892302458267, 0.9034414795078236, 7.700000114738941)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Surface_front" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (-0.4, 0.62, 14.400001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight_25" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (150, 0, 0)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (1.6, 0.62, 14.400000214576721)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_26" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (150, 0, 0)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-0.4000000059604645, 0.62, 14.400000214576721)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_27" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (150, 0, 0)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-1.4000000208616257, 0.62, 14.400000214576721)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_28" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:height = 100
                    float inputs:intensity = 11000
                    bool inputs:normalize = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus = 0
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (150, 0, 0)
                    double3 xformOp:scale = (0.00893, 0.00193, 0.00193)
                    double3 xformOp:translate = (-2.400000035762787, 0.62, 14.400000214576721)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_B9A0DF1C6EBA7935" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_B9A0DF1C6EBA7935.usd@
        )
        {
            token visibility = "invisible"

            def RectLight "RectLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (0.00838, 0.00197, 0.00956819294709261)
                double3 xformOp:translate = (-8.2, 1.8000000268220901, 0.05)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 65, 0)
                double3 xformOp:scale = (0.00838, 0.00197, 0.00956819294709261)
                double3 xformOp:translate = (-8.56027508942833, 1.800000026822092, 4.7124886323400785)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (0.00838, 0.00197, 0.00956819294709261)
                double3 xformOp:translate = (-2.400000035762787, 1.8000000268220901, 0.05)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_5FD162A7B5625932" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_5FD162A7B5625932.usd@
        )
        {
            token visibility = "invisible"

            def RectLight "RectLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 0, -27.93252)
                double3 xformOp:scale = (0.00814, 0.00174, 1)
                double3 xformOp:translate = (-1.600000023841858, 3.400000050663948, -0.4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 0, -27.93252)
                double3 xformOp:scale = (0.00814, 0.00174, 1)
                double3 xformOp:translate = (-0.6504462158755546, 2.97842794317902, -0.4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 0, -27.93252)
                double3 xformOp:scale = (0.00814, 0.00174, 1)
                double3 xformOp:translate = (3.243536948823043, 2.302619469692899, -0.39999999999991387)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 0, -27.93252)
                double3 xformOp:scale = (0.00814, 0.00174, 1)
                double3 xformOp:translate = (5.0948075157189585, 1.4387462882534519, -0.4000000000009657)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "RectLight_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 100
                float inputs:intensity = 11000
                bool inputs:normalize = 1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus = 0
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 100
                double3 xformOp:rotateXYZ = (90, 0, -27.93252)
                double3 xformOp:scale = (0.00814, 0.00174, 1)
                double3 xformOp:translate = (5.984100576967913, 0.9978371479760664, -0.40000000000005764)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_7A72C0F36E23113A" (
            prepend references = @../../../../../Max Payne/e2driver/rtx-remix/captures/meshes/mesh_7A72C0F36E23113A.usd@
        )
        {
            token visibility = "invisible"

            def Xform "Train_inside_1" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                float3 xformOp:translate:pivot = (17.868221, 1.1111207, -0.25942144)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.867254358497386, 1.2581002479015275, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.882189426704418, 1.2581002479018006, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.879724269828408, 1.2581002479019103, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (21.88479091623764, 1.2581002479021164, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_04" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (21.877776723175614, 1.2533401817093608, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_05" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.86599333725958, 1.2533401817094292, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_06" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.873808849598024, 1.2533401817096077, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_07" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (18.862330187456006, 1.2533401817097778, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_08" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (14.874330973692166, 1.2533401817100274, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_09" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (11.87060581597968, 1.2533401817102365, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_10" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (11.865776259922141, 0.896298350405342, -1.9778105321170345)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_11" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (10.859730407146284, 0.896298350405342, -1.9778105321172073)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_12" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.857866696912405, 0.896298350405342, -1.9778105321173751)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_13" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (15.852087562735546, 0.896298350405342, -1.97781053211757)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_14" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (16.855881073131584, 0.896298350405342, -1.977810532117749)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_15" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (17.851641038677272, 0.896298350405342, -1.9778105321178663)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_16" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (18.856153507958794, 0.896298350405342, -1.9778105321180057)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_17" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.84893228569773, 0.896298350405342, -1.9778105321180834)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_18" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.860919309060034, 0.896298350405342, -1.9778105321182229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_19" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (22.848143456559477, 0.896298350405342, -1.9778105321183401)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_20" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (23.861263873853304, 0.896298350405342, -1.977810532118424)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_21" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (24.851414518623166, 0.896298350405342, -1.9778105321185968)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_22" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (24.87671232365023, 0.8962983504052788, 1.458967669746207)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_23" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.878313615903444, 0.8962983504052788, 1.4589676697464289)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_24" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.88943884627284, 0.8962983504052788, 1.4589676697465335)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_25" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (14.887146049287322, 0.8962983504052788, 1.4589676697466507)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_26" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (13.896180245244233, 0.8962983504052788, 1.458967669746779)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_27" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.902295363121839, 0.8962983504052788, 1.4589676697468978)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Train_inside_02" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-16.71213390695506, 0, 0)
                float3 xformOp:translate:pivot = (17.868221, 1.1111207, -0.25942144)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.867254358497386, 1.2581002479015275, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.882189426704418, 1.2581002479018006, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.879724269828408, 1.2581002479019103, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (21.88479091623764, 1.2581002479021164, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_04" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (21.877776723175614, 1.2533401817093608, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_05" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.86599333725958, 1.2533401817094292, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_06" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.873808849598024, 1.2533401817096077, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_07" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (18.862330187456006, 1.2533401817097778, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_08" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (14.874330973692166, 1.2533401817100274, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_09" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (11.87060581597968, 1.2533401817102365, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_10" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (11.865776259922141, 0.896298350405342, -1.9778105321170345)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_11" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (10.859730407146284, 0.896298350405342, -1.9778105321172073)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_12" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.857866696912405, 0.896298350405342, -1.9778105321173751)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_13" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (15.852087562735546, 0.896298350405342, -1.97781053211757)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_14" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (16.855881073131584, 0.896298350405342, -1.977810532117749)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_15" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (17.851641038677272, 0.896298350405342, -1.9778105321178663)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_16" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (18.856153507958794, 0.896298350405342, -1.9778105321180057)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_17" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.84893228569773, 0.896298350405342, -1.9778105321180834)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_18" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.860919309060034, 0.896298350405342, -1.9778105321182229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_19" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (22.848143456559477, 0.896298350405342, -1.9778105321183401)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_20" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (23.861263873853304, 0.896298350405342, -1.977810532118424)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_21" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (24.851414518623166, 0.896298350405342, -1.9778105321185968)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_22" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (24.87671232365023, 0.8962983504052788, 1.458967669746207)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_23" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.878313615903444, 0.8962983504052788, 1.4589676697464289)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_24" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.88943884627284, 0.8962983504052788, 1.4589676697465335)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_25" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (14.887146049287322, 0.8962983504052788, 1.4589676697466507)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_26" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (13.896180245244233, 0.8962983504052788, 1.458967669746779)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_27" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.902295363121839, 0.8962983504052788, 1.4589676697468978)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Train_inside_03" (
                kind = "group"
            )
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-33.46111989873964, 0, 0)
                float3 xformOp:translate:pivot = (17.868221, 1.1111207, -0.25942144)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.867254358497386, 1.2581002479015275, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.882189426704418, 1.2581002479018006, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.879724269828408, 1.2581002479019103, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (21.88479091623764, 1.2581002479021164, 0.9439246121897871)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_04" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (21.877776723175614, 1.2533401817093608, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_05" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.86599333725958, 1.2533401817094292, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_06" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.873808849598024, 1.2533401817096077, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_07" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (18.862330187456006, 1.2533401817097778, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_08" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (14.874330973692166, 1.2533401817100274, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_09" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (180, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (11.87060581597968, 1.2533401817102365, -1.4476592770972185)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_10" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (11.865776259922141, 0.896298350405342, -1.9778105321170345)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_11" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (10.859730407146284, 0.896298350405342, -1.9778105321172073)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_12" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.857866696912405, 0.896298350405342, -1.9778105321173751)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_13" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (15.852087562735546, 0.896298350405342, -1.97781053211757)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_14" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (16.855881073131584, 0.896298350405342, -1.977810532117749)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_15" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (17.851641038677272, 0.896298350405342, -1.9778105321178663)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_16" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (18.856153507958794, 0.896298350405342, -1.9778105321180057)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_17" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.84893228569773, 0.896298350405342, -1.9778105321180834)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_18" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.860919309060034, 0.896298350405342, -1.9778105321182229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_19" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (22.848143456559477, 0.896298350405342, -1.9778105321183401)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_20" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (23.861263873853304, 0.896298350405342, -1.977810532118424)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_21" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (24.851414518623166, 0.896298350405342, -1.9778105321185968)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_22" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (24.87671232365023, 0.8962983504052788, 1.458967669746207)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_23" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (20.878313615903444, 0.8962983504052788, 1.4589676697464289)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_24" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (19.88943884627284, 0.8962983504052788, 1.4589676697465335)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_25" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (14.887146049287322, 0.8962983504052788, 1.4589676697466507)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_26" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (13.896180245244233, 0.8962983504052788, 1.458967669746779)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def RectLight "RectLight_27" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -0), (50, 50, 0)]
                    float inputs:colorTemperature = 6500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 14
                    float inputs:height = 100
                    float inputs:intensity = 1
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 100
                    double3 xformOp:rotateXYZ = (270, 0, 0)
                    double3 xformOp:scale = (0.009581936302388891, 0.0013568561088923132, 0.004945820579474714)
                    double3 xformOp:translate = (12.902295363121839, 0.8962983504052788, 1.4589676697468978)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }
    }

    over "lights" (
        active = false
    )
    {
        over "light_4175C360456654A2"
        {
            token visibility = "invisible"
        }

        over "light_5BDC9153E7287D49"
        {
            token visibility = "invisible"
        }

        over "light_5D8C16FD3B2C0CDE"
        {
            token visibility = "invisible"
        }

        over "light_807ECF254579415B"
        {
            token visibility = "invisible"
        }

        over "light_BF7D7008A6D5B307"
        {
            token visibility = "invisible"
        }

        over "light_CDC7A6B982061A3A"
        {
            token visibility = "invisible"
        }

        over "light_DBF5453483A383BA"
        {
            token visibility = "invisible"
        }

        over "light_E7B83A29CDBD10B8"
        {
            token visibility = "invisible"
        }
    }

    over "Camera" (
        active = false
    )
    {
    }
}

